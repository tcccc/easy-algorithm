//rbt，红黑树

//首先红黑树也是二叉树的一种
//与AVL树一样，红黑树比二叉树多了许多规则
//回忆一下AVL树，它是依靠平衡因子即所谓的高度来维持 自身的平衡的
//红黑树的意义与AVL树一样，是为了打破普通二叉树可能会退化成线性单链表的可能性
//既然是为了查找效率高，那么它很自然的也是一颗平衡二叉树
//红黑树的平衡性是不如AVL树的，这意味着，它的查询效率比AVL树要低一些
//同样的有缺点肯定要有优点，不然没有存在的意义了，红黑树的插入与删除的效率比AVL树要高

//一个写法优秀的AVL树(注意是写法优秀，有些情况不需要回溯到根节点）的插入和删除的效率在大量数据的支持下，可以看出只比rbt略低一些，
//同样的查询效率也只比rbt略高
//当你需要一个二叉树数据结构时，倾向于哪个方面就选取哪种平衡二叉树，虽然基本需要平衡二叉树的地方都选择了红黑树，我没搞清楚为什么。
//可能在那些场景下查询操作并不如插入与删除操作做的次数多，亦或红黑树更稳定些？

rbtree的定义，符合以下几点的二叉树就是红黑树.
1.每个节点只能为黑色或红色
2.红色节点必须要有2个黑色子节点
3.根节点为黑色
4.叶子为null，为黑色节点
5.每个节点到其各个叶子的路径上包含相同个数的黑色节点

// 现在有个问题，我们知道红黑树是平衡树对吧，为什么？ 
//根据这些性质推导出红黑树是一个平衡树，以此来保证我们的查询操作效率在O(log2n)级别
//推导过程有些麻烦，主要是涉及了合并操作

//分析存在多少黑色节点的叶子， 很显然是n+1，原因是插入一个节点必然另原树失去一个黑色的叶子，而插入的节点又会带来2个黑色的叶子
//所以很明显了，2-1=1，这意味插入一个节点就会多一个叶子，所以总共有n+1个叶子，你也可以用归纳法来推导

//假设红黑树的高度为h， 我们现在进行合并操作，把所有红色节点与它的父节点合并，最多有n/2个红色节点对吧，最终合并成一个2-3-4树，设高度为h'
//    h/2<=h'   ，这里引入一个黑高度的概念，从此节点向叶子走，经过多少黑节点黑高度就是多少，不包含他自己
//  合并后2-3-4数，他的高度应是他的黑高度，而黑高度>=h/2
//现在考虑一个2-3-4树有多少个叶子?  不需要一个准确数，只需要一个范围，从分支数的思路来看，至多有 4的h'次幂个叶子，最多4个分支
//至少有2的h'次幂个叶子，至少2个分支，在根据前面推出的n+1，我们得出     2的h'次幂<= n+1 <=4的h'次幂
//所以   h'<=log2(n+1)，  再根据 h/2<=h'
//最终推出   h<=2log2(n+1)    证明了红黑树的高度是log2n级别的
//只要保证红黑树的特性，那么我们的推导就是成立的

//能够保证高度了，那么查询效率就得到了保证，现在关键的是如何让红黑树保持它的特性，或者说在插入一个节点破坏了结构后，如何让它恢复
//这涉及到了旋转，染色的操作，分多种情况，虽然多，但至少是有限的，

//我们插入的节点应该是什么样的？  必须是红色的，如果不明白，证明根本没懂红黑树，你可以假象一下插入黑色节点会导致什么后果，插入红色的好处
//还是说明一下吧，插入的节点一开始总是在取代叶子对吧，最理想的插入是叶子的上一级全部为红，这里再怎么插入都是要进行平衡操作

//我们进行插入会发现只能破坏性质2
//我突然明白红黑树比AVL好在哪里了，红黑树的插入旋转次数总是小于2的，剩下要处理的都是染色操作，染色操作是可以与查询同时进行的，提高了并发部分


public class RBTree {

private static boolean RED = false;
private static boolean BLACK = true;
private Node root;
	class Node{
		int value;
		Node rightNode;
		Node leftNode;
		Node parent;
		boolean color;
		Node(int value,boolean color,Node parent,Node left,Node right){
			this.value=value;
			this.color=color;
			this.parent=parent;
			this.leftNode=left;
			this.rightNode=right;
		}
	}
	//左旋转操作
	private void leftRotate(Node x){
		Node y=x.rightNode;
		x.rightNode=y.leftNode;
		if(y.leftNode!=null)
			y.leftNode.parent=x;
		
		y.parent=x.parent;
		if(x.parent == null)
			root=y;
		else {
			if(x.parent.leftNode==x)
				x.parent.leftNode=y;
			else
				x.parent.rightNode=y;
		}
		y.leftNode=x;
		x.parent=y;
	}
	//右旋转操作
	private void rightRotate(Node y){
		Node x=y.leftNode;
		y.leftNode=x.rightNode;
		if(x.rightNode!=null)
			x.rightNode.parent=y;
		x.parent=y.parent;
		if(y.parent==null)
			root=x;
		else {
			if(y.parent.leftNode==y)
				y.parent.leftNode=x;
			else 
				y.parent.rightNode=x;
		}
		x.rightNode=y;
		y.parent=x;
	}
	//添加操作
	private void insert(Node node){
		Node y= null;
		Node x=this.root;
		while(x!=null){
			y=x;
			if(node.value>x.value)
				x=x.rightNode;
			else 
				x=x.leftNode;
		}
		node.parent=y;
		if(y!=null){
			if(node.value>y.value)
				y.rightNode=node;
			else
				y.leftNode=node;
		}else
			this.root=node;
	node.color=RED;
	insertFixup(node);
	}
	public void insert(int value){
		Node node=new Node(value,BLACK,null,null,null);
		insert(node);
	}
	private void insertFixup(Node node){
		Node parent,gparent;
		while( (parent=node.parent)!=null && parent.color==RED){
			gparent =parent.parent;
			if(parent==gparent.leftNode){
				Node uncle=gparent.rightNode;
				if(uncle!=null && uncle.color==RED ){
					uncle.color=BLACK;
					parent.color=BLACK;
					gparent.color=RED;
					node =gparent;
					continue;
				}
				
				if(parent.rightNode==node){
					Node temp;
					leftRotate(parent);
					temp=parent;
					parent=node;
					node=temp;
				}
				parent.color=BLACK;
				gparent.color=RED;
				rightRotate(gparent);
			}else{
				Node uncle=gparent.leftNode;
				if(uncle!=null && uncle.color==RED){
					uncle.color=BLACK;
					parent.color=BLACK;
					gparent.color=RED;
					node=gparent;
				}
				
				if(parent.leftNode==node){
					Node temp;
					rightRotate(parent);
					temp=parent;
					parent=node;
					node=temp;
				}
				parent.color=BLACK;
				gparent.color=RED;
				leftRotate(gparent);
			}
		}
		root.color=BLACK;
	}
	private void remove(Node node){
		Node child,parent;
		boolean color;
		if(node.leftNode!=null && node.rightNode!=null){
			Node replace=node.rightNode;
			while(replace.leftNode!=null)
				replace=replace.leftNode;
			if(node.parent!=null){
				if(node.parent.leftNode==node)
					node.parent.leftNode=replace;
				else 
					node.parent.rightNode=replace;
			}else
				root=replace;
			
			child=replace.rightNode;
			parent=replace.parent;
			color=replace.color;
			
			if(parent==node)
				parent=replace;
			else{
				if(child!=null)
					child.parent=parent;
				parent.leftNode=child;
				replace.rightNode=node.rightNode;
				node.rightNode.parent=replace;
			}
			replace.parent=node.parent;
			replace.color=node.color;
			replace.leftNode=node.leftNode;
			node.leftNode.parent=replace;
			if(color ==BLACK)
				removeFixup(child,parent);
			node=null;
			return ;
		}
		if(node.leftNode!=null)
			child=node.leftNode;
		else
			child=node.rightNode;
		
		parent= node.parent;
		color=node.color;
		child.parent=parent;
		if(node.parent!=null){
			if(node.parent.leftNode==node)
				node.parent.leftNode=child;
			else 
				node.parent.rightNode=child;
		}else
			root=child;
		if(color=BLACK)
			removeFixup(child,parent);
		node=null;
	}
	public void remove(int value){
		Node node;
		if( (node=search(root,value) )!=null)
			remove(node);
	}
	private Node search(Node x, int value) {
         if (x==null)
           return x;
         if (value<x.value)
             return search(x.leftNode, value);
			else if (value>x.value)
             return search(x.rightNode, value);
			else
            return x;

	}
	private void removeFixup(Node node, Node parent) {
		Node other;
		while( (node==null || node.color==BLACK) && (node!=root)){
			if(parent.leftNode==node){
				other=parent.rightNode;
				if(other.color==RED){
					other.color=BLACK;
					parent.color=RED;
					leftRotate(parent);
					other=parent.rightNode;
				}
				if ((other.leftNode==null || other.leftNode.color==BLACK) &&
		                (other.rightNode==null || other.rightNode.color==BLACK)) {
		                // Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  
		                other.color=RED;
		                node = parent;
		                parent = node.parent;
		            } else {
		            	if(other.rightNode==null || other.rightNode.color==BLACK){
		            		other.leftNode.color=BLACK;
		            		other.color=RED;
		            		rightRotate(other);
		            		other=parent.rightNode;
		            	}
		            	other.color=parent.color;
		            	parent.color=BLACK;
		            	other.rightNode.color=BLACK;
		            	leftRotate(parent);
		            	node=root;
		            	break;
		            }
			}else{
				other = parent.leftNode;
	            if (other.color==RED) {
	                // Case 1: x的兄弟w是红色的  
	                other.color=BLACK;
	                parent.color=RED;
	                rightRotate(parent);
	                other = parent.leftNode;
	            }

	            if ((other.leftNode==null || other.leftNode.color==BLACK) &&
	                (other.rightNode==null || other.rightNode.color==BLACK)) {
	                // Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  
	                other.color=RED;
	                node = parent;
	                parent = node.parent;
	            } else {

	                if (other.leftNode==null || other.leftNode.color==BLACK) {
	                    // Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  
	                    other.rightNode.color=BLACK;
	                    other.color=RED;
	                    leftRotate(other);
	                    other = parent.leftNode;
	                }

	                // Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。
	                other.color= parent.color;
	                parent.color=BLACK;
	                other.leftNode.color=BLACK;
	                rightRotate(parent);
	                node = this.root;
	                break;
	            }
			}
		}
		if (node!=null)
	        node.color=BLACK;
	}
	public void inOrder(Node node){
		if(null!=node){
			inOrder(node.leftNode);
			System.out.print(node.value+" "+node.color+"    ");
			inOrder(node.rightNode);
		}
	}
	public void inOrder(){
		inOrder(root);
	}
	public static void main(String[] args){
		int[] a={1,3,11,2,908,123,523,21,65634,123,75623,12316,534};
		
		RBTree avlTree=new RBTree();
		avlTree.inOrder();
		for(int i=0; i< a.length; i++)
			avlTree.insert(a[i]);
		avlTree.inOrder();
		avlTree.remove(1);
		System.out.println();
		avlTree.inOrder();
		System.out.println();
	
	}
	
}





