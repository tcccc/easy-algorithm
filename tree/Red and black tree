//rbt，红黑树

//首先红黑树也是二叉树的一种
//与AVL树一样，红黑树比二叉树多了许多规则
//回忆一下AVL树，它是依靠平衡因子即所谓的高度来维持 自身的平衡的
//红黑树的意义与AVL树一样，是为了打破普通二叉树可能会退化成线性单链表的可能性
//既然是为了查找效率高，那么它很自然的也是一颗平衡二叉树
//红黑树的平衡性是不如AVL树的，这意味着，它的查询效率比AVL树要低一些
//同样的有缺点肯定要有优点，不然没有存在的意义了，红黑树的插入与删除的效率比AVL树要高

//一个写法优秀的AVL树(注意是写法优秀，有些情况不需要回溯到根节点）的插入和删除的效率在大量数据的支持下，可以看出只比rbt略低一些，同样的查询效率也只比rbt略高
//当你需要一个二叉树数据结构时，倾向于哪个方面就选取哪种平衡二叉树，虽然基本需要平衡二叉树的地方都选择了红黑树，我没搞清楚为什么。可能在那些场景下
//查询操作并不如插入与删除操作做的次数多，还是红黑树更稳定些？

