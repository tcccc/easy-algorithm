//在学习了二叉查找树之后，你会发现有的时候树分布非常不均衡，可能左边多，右边少，极端情况甚至可以退化成一个线性单链表
//在这种情况，查找的效率极低，n个节点，则有n层，或者说高度为n，查询的时间复杂度为n，简直爆炸

//很自然的，人们就会就想到怎么建立一个高度较为稳定的二叉树
//AVL就此诞生了，还蛮早的，上个世纪就有这东西了

//平衡二叉树（Balaned Binary Tree)也叫AVL树，如果我没记错的话，AVL取自两个作者的名字
//平衡二叉树要求左右两边的子树高度差不超过1，且任意一个子树均为平衡二叉树


//AVL相比普通二叉查找树的优点是显而易见的，AVL不会退化成线性单链表，高度基本为log2n，这意味着，查询操作的复杂度为很稳定，为log2n
//既然他比普通二叉查找树要求多了点，很自然的，我们创建AVL的过程是复杂一些的，插入跟删除节点就是会影响树的结构的，所以这些操作也会复杂一些
// AVL的难点就在于他增加节点及减少节点时可能会破环树的结构，导致AVL不再是AVL，所以需要旋转操作，他是如何保证自身结构的呢?


//这个旋转操作总共有四种情况，其实按照对称来说可以分成两种情况 ll，lr，理解了两种另外两种是一样的道理
//左左   右右   左右  右左  想要直观点说明还是得靠图，没图不好说，这里放图片麻烦，而且用别人的图放到开源社区也不好意思对吧
//在脑海里构建一个模型吧，锻炼一下, ps：这里的高度指的是叶子到根节点最长路径

//想象root为根节点，r1为它的左子节，r2为它的右子节点，r1的高度为root.height-1   , r2的高度为root.height-3
//左右高度差超过1了，左边高了点,可能存在两种情况

//ll  左左的情况是  r1的左子树比右子树高1

//lr  左右的情况是   r1的右子树比左子树高1，思考一下为什么不存在r1左边高度等于右边高度的情况？
//原因在于r1本来是个AVL树，如果相等，那么就不会破坏root左右高度差小于等于2的性质了

//其实要我说就理解一种了其他三种就很容易就解决了，lr与rl不过是操作两次ll，rr而已，而ll，rr又是对称的关系

//代码很长慢慢看

public class AVLTree {
	
	private Node rootNode;
	
	class Node{
		int key;
		int height;
		Node left;
		Node right;
		Node(int key,Node left,Node right){
		this.key=key;
		this.height=0;
		this.left=left;
		this.right=right;
		}
	}
	//获取高度，空的话，定义高度为0，这个树有多少层高度就是多少
	private int height(Node node){
		return node==null?0:node.height;
	}
	public int height(){
		return height(rootNode);
	}
	//返回较大值
	private int max(int a,int b){
		return a>b?a:b;
	}
	//左左旋转
	private Node leftLeftRotation(Node n2){
		Node n1=n2.left;
		n2.left=n1.right;
		n1.right=n2;
		
		n2.height=max( height(n2.left),height(n2.right))+1;
		n1.height=max( height(n1.left),n2.height)+1;
		return n1;
	}
	//右右旋转
	private Node rightRightRotation(Node n1){
		Node n2=n1.right;
		n1.right=n2.left;
		n2.left=n1;
		n1.height = max( height(n1.left), height(n1.right)) + 1;  //这里要更新一下高度，n1.left,n1.right内部
		n2.height = max( height(n2.right), n1.height) + 1;		//都没改变所以高度没变化
		return n2;
	}
	private Node leftRightRotation(Node n3){     //先进行n3.left的右右旋转，结束后，会发现情况变成了左左
		n3.left=rightRightRotation(n3.left);
		return leftLeftRotation(n3);
	}
	private Node rightLeftRotation(Node n1){
		n1.right=leftLeftRotation(n1.right);
		return rightRightRotation(n1);
	}
	
	public void insert(int key){
		rootNode=insert(rootNode,key);
	}
	public Node insert(Node node,int key){
		if(node==null)
			node=new Node(key,null,null);
		else {
			if(key<node.key){
				node.left=insert(node.left,key);
				if( height(node.left)-height(node.right) == 2 ){  //这里存在一个小细节，为什么不需要用绝对值呢？
					if(key<node.left.key)                       //因为这个结果必然大于等于0，left>=right
						node=leftLeftRotation(node);
					else
						node=leftRightRotation(node);
				}
			}
			else if(key>node.key){
				node.right=insert(node.right,key);
				if( height(node.right)-height(node.left) == 2 ){
					if(key>node.right.key)
						node=rightRightRotation(node);
					else 
						node=rightLeftRotation(node);
				}
			}
			else // key==node.key  ,不允许重复
				System.out.println("key repeat!");
		}
		node.height=max( height(node.left),height(node.right))+1;
		return node;
	}
	
	//根据key查找代码
	public Node search(int key){
		return search(rootNode,key);
	}
	private Node search(Node node,int key){
		if(node==null)
			return node;
		if(key<node.key)
			return search(node.left,key);
		else if(key>node.key)
			return search(node.right,key);
		else
			return node;
	}
	private Node miniNode(Node node){
		if(node==null)
			return node;
		while(node.left!=null){
			node=node.left;
		}
		return node;
			
	}
	public Node miniNode(){
		Node node=miniNode(rootNode);
		if(null!=node)
			return node;
		return null;
	}
	private Node maxNode(Node node){
		if(node==null)
			return node;
		while(node.right!=null){
			node=node.right;
		}
		return node;
			
	}
	public Node maxNode(){
		Node node=maxNode(rootNode);
		if(null!=node)
			return node;
		return null;
	}
	
	
	//移除节点
	public void remove(int key){
		Node node=search(rootNode,key);
		if(node!=null)
			rootNode=remove(rootNode,key);
	}
	private Node remove(Node node,int key){
		if(node==null)
			return null;
		if(key< node.key){                       //删除的节点在左边
			node.left=remove(node.left,key);
			if(height(node.right)-height(node.left) == 2){  //注意！删除的节点在左边，那我们需要调整的是右边
				if( height(node.right.left)> height(node.right.right) )
					node=rightLeftRotation(node);
				else
					node=rightRightRotation(node);
			}
		}
		else if(key> node.key){
			node.right=remove(node.right,key);
			if( height(node.left)- height(node.right) == 2){
				if(height(node.left.right)>height(node.left.left) )
					node=leftRightRotation(node);
				else
					node=leftLeftRotation(node);
			}
		}
		else{     //找到了key==node.key，我们要移除这个node
			if(node.left!=null && node.right!=null){  //老生常谈的4种情况，看看他有没有子节点,00,10,01,11
				if(height(node.left)> height(node.right)){
					Node maxNode=maxNode(node.left);
					node.key=maxNode.key;
					node.left=remove(node.left,maxNode.key);
				}
				else {
					Node minNode=miniNode(node.right);
					node.key=minNode.key;
					node.right=remove(node.right,minNode.key);
				}
			}else{
				node=(node.left!=null)?node.left:node.right;
			}
		}
		node.height=max(height(node.left),height(node.right));
		return node;
	}
	public void inOrder(Node node){
		if(null!=node){
			inOrder(node.left);
			System.out.print(node.key+"  ");
			inOrder(node.right);
		}
	}
	public void inOrder(){
		inOrder(rootNode);
	}
	public static void main(String[] args){
		int[] a={1,3,11,2,908,123,523,21,65634,123,75623,12316,534};
		
		AVLTree avlTree=new AVLTree();
		for(int i=0; i< a.length; i++)
			avlTree.insert(a[i]);
		avlTree.inOrder();
		System.out.println();
		System.out.println(avlTree.search(1)==null);
		avlTree.remove(1);
		avlTree.inOrder();
		System.out.println();
		System.out.println(avlTree.search(1)==null);
	}
	
}

运行结果：
key repeat!
1  2  3  11  21  123  523  534  908  12316  65634  75623  
false
2  3  11  21  123  523  534  908  12316  65634  75623  
true

//可以看到我们创建的AVL树是不能放入重复的数据的
//如何改进呢， 考虑到旋转的操作，若我们把等于的情况归于小于或大于当中一个的话，会造成很糟糕的后果，会出现右节点小于自身的情况
//具体原因这里不分析了，测试一下很好找到
//给出一种思路解决数据重复，增加一个变量用以记录元素个数sum，初始值为1，增加一个相同的元素，则sum++，移除一个则sum--，当sum==0时
// 这个节点调成null，  遍历时输出sum的次数，很好实现，






