

//希尔排序 
//希尔排序是直接插入排序的优化版本，本质上依旧是个插入排序
//不同与直接插入排序的地方，希尔排序是根据增量将一个序列，划分为多个序列进行插入排序

//为何希尔排序会比直接插入排序在时间复杂度上要好？
//    这是个棘手的问题，简单来说简单插入排序在序列是基本有序的时候时间复杂度是极低的

//希尔排序的复杂度如何计算？
//    通常情况是无法确切的证明的，时间复杂度与增量的选取有关，在最优增量的选取范围的时间复杂度是n的1.3次幂，一般情况下时间复杂度在n的(1，2]之间取值

//增量的定义
//   增量的选取很关键，至于如何选取，我不清楚，如有需要可以尝试研究一下，这是一个未解决的问题



//依旧默认拿到乱序的数组arrays,t为增量, t的选取不能大于n，我们在进入shallSort之前可以先定义一个方法shallSort_bengin进行一些操作，免去不必要的麻烦
//这里强调希尔排序的理论方法，避免冗余，就不写了。
//asc

public static void shallSort(int t){
  int n = arrays.length;
  for(int h=n/t; h > 0; h/=t)
    for(int i = h; i < n; i++)
      for(int j = i-h; j >= 0; j-=h )
          if(arrays[j]>arrays[j+h]){
            int temp = arrays[j];
            arrays[j] = arrays[j+h];
            arrays[j+h] = temp;
          }
}
//代码较少，嵌套3个循环，简单讲解一下代码
//第24行，第一个循环，我们可以得到一组序列，将整个数组划分为多个数组，最终h=1，化为一个数组
//25行，第二个循环，i=h,我们从h往后开始进行判断,因为整组数组必然存在2h及以上的数据，所以0~h范围内的数据我们都不会遗漏
//26行，第三个循环，在i-h之前或许存在几个数据，对 i-h，i-2h,i-3h...i-?h>=0,组成的一组数组进行插入排序
//相信你会发现，前面简单插入排序我们提到过，当发现需要进行排序时，我们可以边腾地方边搜寻，而上面的代码是直接进行交换，下面我们进行优化


//优化代码

public static void shallSort(int t){
  int n = arrays.length;
  int j;
  for(int h=n/t; h > 0; h/=t)
    for(int i = h; i < n; i++)
      if(arrays[i-h]>arrays[i]){
        int temp = arrays[i];
        for(j=i-h; j>=0 && temp<arrays[j]; j-=h)
          arrays[i+h]=arrays[i];
        arrays[j+h]=temp;
      }
}





