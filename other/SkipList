
SkipList,跳跃表
一种简单高效的链表，redis的有序集合使用了跳表作为数据结构
跳表是一个概率型的数据结构，因为它的层数受到随机数的影响，意思是，谁也不知道它一定会有多少层，但在大量数据的支持下，它会如我们所预期的一样
相比RBT AVL树，它的效率也并不弱，但实现却是容易了不少，它的思想也很简单，也不需要像红黑树那样要考虑许多情况

一个线性一维链表它的查询插入删除效率均为O(n)级别，太慢了，如果我们记录了中间的一个点呢？在n很大的时候，效率瞬间提高了一倍对吗，如果是2个点呢？
假设这2个点是均匀分布的，2个点将集合分成了3部分对吧，那么效率就是提升了3倍对吗？ 这跟二叉树的思想很像，只不过跳表不采用固定记录的办法，而是依靠概率
进行记录，回顾一下AVL RBT，我们知道这两个树一直在维护自身的平衡性，这也是它们查询效率优秀的原因对吗。

而跳表依靠概率来确保它的平衡性，在小数据的情况下确实，跳表似乎不太稳定，但在大数据的支持下，那么我们甚至可以理解为，所有的期望值即最终会出现的局面

好了，介绍一下跳表，首先假设一条很长的线性链表，这是第一层，我们将其中一部分节点提取出来，这里我们取P=1/4，提取出来的节点按序排好，这是第二层
关键的地方，我们要让第一层与第二层建立联系，当我们查询时，发现某个节点在第二层的某两个节点之中，那么我们就可以下到第一层去寻找这个节点。
同样的以P=0.25的概率提升第二层的节点到第三层，每一层的头为最小数，尾为最大数，这样所有的数的可能都包含在每一层中了。

这里我们做一次查询所经历的事情是这样的 ，假定查询建为key，在第i层进行遍历，发现在key大于n1，小于等于n1下一个节点n2，这样我们知道key如果存在的话
它所在的范围应在（n1，n2】，继续到第i-1层进行遍历，初始节点为n1，不断重复的进行操作，慢慢进入到第1层进行遍历，按正常情况下，查找的范围是在不断变小的
（至少不会变大），最终缩减成一个节点




	//默认最大层数
	private final int MAX_LEVEL;
	//当前层数
	private int listLevel;
	//头尾
	private SkipListNode<T> head;
	private SkipListNode<T> tail;
	//决定level的参数
	private final double P;
	//相关论文给出的最佳概率值
	private static final double best_p = 0.25;
	
	public SkipList(){
		//使用0.25,15，相关论文给出概率为0.25时较为理想
		this(best_p,(int)Math.ceil(Math.log(Integer.MAX_VALUE) / Math.log(1 / best_p)) - 1);
	}
	
	public SkipList(double probability,int maxLevel){
		P=probability;
		MAX_LEVEL=maxLevel;
		listLevel=1;
		head = new SkipListNode<T>(Integer.MIN_VALUE,null,maxLevel);
		tail = new SkipListNode<T>(Integer.MAX_VALUE,null,maxLevel);
		for(int i = 0; i < head.forward.length ; i++)
			head.forward[i]=tail;
	}
	
	 private int randomLevel() {
	        int lvl = 1;
	        while (lvl < MAX_LEVEL && Math.random() < P) {
	            lvl++;
	        }
	        return lvl;
	    }
	
//这是跳表节点的数据结构
	class SkipListNode<T>{
		T value;
		int key;
		SkipListNode[] forward;
		public SkipListNode(int key,T value,int level){
			this.value=value;
			this.key=key;
			this.forward=new SkipListNode[level];
		}
	}
//
	
	public T search(int key){
		SkipListNode<T> currentNode=head;
		for(int i = listLevel-1; i >= 0; i--)
			while(currentNode.forward[i].key<key)
				currentNode=currentNode.forward[i];
		if(currentNode.key == key)
			return currentNode.value;
		else 
			return null;
	}
	
	public void insert(int key,T value){
		SkipListNode<T>[] update = new SkipListNode[MAX_LEVEL];
		SkipListNode<T> currentNode=head;
		for (int i = listLevel - 1; i >= 0; i--) {
            while (currentNode.forward[i].key < key) {
                currentNode = currentNode.forward[i];
            }
            update[i] = currentNode;//这个数据记录每一层如果它存在，则应该插入的位置
        }
		currentNode = currentNode.forward[0];
		if(currentNode.key==key)
			currentNode.value=value;
		else {
			int thisNodeLevel=randomLevel();
			if(thisNodeLevel>listLevel){
				for(int i=listLevel; i<thisNodeLevel;i++)
					update[i]=head;
				listLevel=thisNodeLevel;
			}
			SkipListNode<T> newNode = new SkipListNode<T>(key,value,thisNodeLevel);
			for(int i = 0; i < thisNodeLevel; i++){
				newNode.forward[i]=update[i].forward[i];
				update[i].forward[i]=newNode;
			}
		}
	}
	public void delete(int key){
		SkipListNode<T>[] update = new SkipListNode[MAX_LEVEL];
		SkipListNode<T> currentNode=head;
		for (int i = listLevel - 1; i >= 0; i--) {
            while (currentNode.forward[i].key < key) {
                currentNode = currentNode.forward[i];
            }
            update[i] = currentNode;//这个数据记录每一层如果它存在，则应该插入的位置的前一个节点
        }
		currentNode=currentNode.forward[0];
		if(currentNode.key==key){
			for(int i = 0; i < listLevel; i++){
				if(update[i].forward[i].key!=currentNode.key)
					break;
				update[i].forward[i]=currentNode.forward[i];
			}
			
			while(listLevel > 0 && head.forward[listLevel-1]==tail)
				listLevel--;
			
		}
	}
    public void display() {
        for (int i = listLevel - 1; i >= 0; i--) {
            SkipListNode<T> currentNode = head.forward[i];
            while (currentNode != tail) {
                System.out.print(currentNode.key + "->");
                currentNode = currentNode.forward[i];
            }
            System.out.println("tail");
        }
    }

    public static void main(String[] args) {
        SkipList<Integer> sl = new SkipList<Integer>();
        sl.insert(33, 33);
        sl.insert(55, 55);
        sl.insert(101, 101);
        sl.insert(1, 1);
        sl.insert(100, 100);
        sl.insert(8, 8);
        sl.insert(62, 62);
        sl.insert(39, 39);
        sl.display();
        System.out.println("---");
       sl.delete(33);
       sl.delete(39);
        sl.display();
    }
	
